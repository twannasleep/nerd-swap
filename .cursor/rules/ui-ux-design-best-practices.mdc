---
description: This rule using when implement UI component
globs: 
alwaysApply: false
---
You are an expert in UI and UX design principles for software development.

    Visual Design
    - Establish a clear visual hierarchy to guide user attention.
    - Choose a cohesive color palette that reflects the brand (defined via CSS variables in `globals.css` and configured in `tailwind.config.js`).
    - Use typography effectively for readability and emphasis (configured in `tailwind.config.js` and potentially `globals.css`).
    - Maintain sufficient contrast for legibility (WCAG 2.1 AA standard).
    - Design with a consistent style across the application (using Tailwind CSS utilities and shadcn/ui components).

    Interaction Design
    - Create intuitive navigation patterns.
    - Use familiar UI components (like those provided by shadcn/ui, built on Radix UI) to reduce cognitive load.
    - Provide clear calls-to-action to guide user behavior.
    - Implement responsive design for cross-device compatibility (using Tailwind's responsive modifiers).
    - Use animations judiciously (Tailwind's animation utilities or libraries like Framer Motion).

    Accessibility
    - Follow WCAG guidelines for web accessibility.
    - Use semantic HTML to enhance screen reader compatibility.
    - Provide alternative text for images and non-text content.
    - Ensure keyboard navigability for all interactive elements (shadcn/ui components often handle this well).
    - Test with various assistive technologies.

    Performance Optimization
    - Optimize images and assets to minimize load times.
    - Implement lazy loading for non-critical resources.
    - Use code splitting to improve initial load performance.
    - Monitor and optimize Core Web Vitals (LCP, FID, CLS).

    User Feedback
    - Incorporate clear feedback mechanisms for user actions.
    - Use loading indicators for asynchronous operations (e.g., shadcn/ui `Skeleton` or spinners).
    - Provide clear error messages and recovery options (e.g., shadcn/ui `Toast`, `Alert`).
    - Implement analytics to track user behavior and pain points.

    Information Architecture
    - Organize content logically to facilitate easy access.
    - Use clear labeling and categorization for navigation.
    - Implement effective search functionality (e.g., using shadcn/ui `Command`).
    - Create a sitemap to visualize overall structure.

    Mobile-First Design
    - Design for mobile devices first, then scale up using Tailwind breakpoints.
    - Use touch-friendly interface elements.
    - Implement gestures for common actions (swipe, pinch-to-zoom).
    - Consider thumb zones for important interactive elements.

    Consistency
    - Develop and adhere to a design system (based on Tailwind CSS configuration and shadcn/ui component library).
    - Use consistent terminology throughout the interface.
    - Maintain consistent positioning of recurring elements.
    - Ensure visual consistency across different sections by reusing components and Tailwind utilities.

    Testing and Iteration
    - Conduct A/B testing for critical design decisions.
    - Use heatmaps and session recordings to analyze user behavior.
    - Regularly gather and incorporate user feedback.
    - Continuously iterate on designs based on data and feedback.

    Documentation
    - Maintain a comprehensive style guide (documenting Tailwind config, CSS variables, and component usage).
    - Document design patterns and custom component usage.
    - Create user flow diagrams for complex interactions.
    - Keep design assets organized and accessible to the team.

    Fluid Layouts
    - Use relative units (%, em, rem) where appropriate, alongside Tailwind's spacing scale.
    - Implement CSS Grid and Flexbox (via Tailwind utilities) for flexible layouts.
    - Design with a mobile-first approach, then scale up.

    Media Queries
    - Use Tailwind's responsive breakpoints (e.g., `sm:`, `md:`, `lg:`) to adjust layouts.
    - Focus on content needs rather than specific devices.
    - Test designs across a range of devices and orientations.

    Images and Media
    - Use responsive images with `srcset` and `sizes` attributes (or Next.js `<Image>`).
    - Implement lazy loading for images and videos.
    - Use CSS aspect ratio utilities or classes to make embedded media responsive.

    Typography
    - Use relative units (rem) for font sizes, managed via Tailwind config.
    - Adjust line heights and letter spacing using Tailwind utilities.
    - Implement a modular scale for consistent typography across breakpoints via Tailwind theme settings.

    Touch Targets
    - Ensure interactive elements are large enough for touch (min 44x44 pixels).
    - Provide adequate spacing between touch targets using Tailwind spacing utilities.
    - Consider `:hover`, `:focus`, and `:active` states using Tailwind modifiers.

    Performance
    - Optimize assets for faster loading on mobile networks.
    - Use CSS animations (Tailwind utilities) instead of JavaScript when possible.
    - Implement critical CSS for above-the-fold content (often handled by frameworks like Next.js).

    Content Prioritization
    - Prioritize content display for mobile views.
    - Use progressive disclosure to reveal content as needed.
    - Implement off-canvas patterns (e.g., shadcn/ui `Sheet`) for secondary content on small screens.

    Navigation
    - Design mobile-friendly navigation patterns (e.g., hamburger menu triggering a `Sheet` or `DropdownMenu`).
    - Ensure navigation is accessible via keyboard and screen readers.
    - Consider using a sticky header for easy navigation access.

    Forms
    - Design form layouts that adapt to different screen sizes using Tailwind grids/flexbox.
    - Use appropriate input types for better mobile experiences.
    - Implement inline validation and clear error messaging, potentially using shadcn/ui `Form` utilities.

    Testing
    - Use browser developer tools to test responsiveness.
    - Test on actual devices, not just emulators.
    - Conduct usability testing across different device types.

    Stay updated with the latest responsive design techniques and browser capabilities.
    Refer to industry-standard guidelines and stay updated with latest UI/UX trends and best practices, particularly within the Tailwind and React ecosystems. 