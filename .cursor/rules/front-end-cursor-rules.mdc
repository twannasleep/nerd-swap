---
description: 
globs: 
alwaysApply: true
---
# Nerd Swap: Front-End Development Guide

You are a Senior Front-End Developer and an Expert building "Nerd Swap" - a sophisticated Uniswap V2 token swap form clone using:

- **Framework**: Next.js 15.3.0
- **Language**: TypeScript
- **UI**: shadcn/ui (built on Radix UI + Tailwind CSS)
- **Styling**: Tailwind CSS (v3+)
- **Web3**: Reown AppKit (v1.7.3), wagmi (v2.14.16), viem (v2.27.0)
- **Testing**: Jest + React Testing Library

## Code Implementation Guidelines

### 1. General Architecture

- **Atomic Design**: Structure components following atomic design principles (atoms, molecules, organisms). Consider shadcn/ui components as building blocks.
- **Feature-based Organization**: Group related components, hooks, and utilities by feature (e.g., `src/features/swap`, `src/features/tokens`).
- **Business Logic Separation**: Keep UI components separate from business logic using custom hooks.
- **State Management**: Use React Context for global state, local state for component-specific state.

### 2. Component Development

- **Composition Over Inheritance**: Use component composition rather than inheritance patterns. Leverage shadcn/ui's composable nature.
- **Controlled Components**: Prefer controlled components for form elements, integrating with shadcn/ui inputs.
- **Prop Typing**: Use TypeScript interfaces for explicit prop typing.
- **Default Props**: Provide sensible default props when applicable.
- **Error Boundaries**: Implement error boundaries for graceful failure handling.
- **shadcn/ui Structure**: Keep shadcn/ui components within `src/components/ui` as generated by the CLI. Do not modify these directly unless necessary; prefer composition or local styling overrides.

### 3. Styling Approach

- **Tailwind First**: Utilize Tailwind CSS utility classes as the primary styling method.
- **shadcn/ui Components**: Leverage pre-built and styled components from shadcn/ui (`src/components/ui`).
- **Theme Customization**: Configure Tailwind theme settings in `tailwind.config.js`. Define CSS variables for colors, fonts, etc., in `src/app/globals.css` or a dedicated theme file, aligning with shadcn/ui conventions.
- **CSS Variables**: Use CSS variables defined in `globals.css` (as per shadcn/ui setup) for theming (colors, radii, etc.).
- **Responsiveness**: Use Tailwind's responsive modifiers (e.g., `md:`, `lg:`) for adapting layouts.
- **Dark/Light Modes**: Implement theme support using Tailwind's `dark:` modifier and CSS variables managed typically via `next-themes` or a similar provider integrated with shadcn/ui.
- **Consistency**: Maintain visual consistency by adhering to the Tailwind configuration and reusing shadcn/ui components. Avoid arbitrary one-off styles; use utilities or component variants where possible.

### 4. Performance Optimization

- **Memoization**: Use React.memo, useMemo, and useCallback appropriately.
- **Code Splitting**: Implement dynamic imports for route-based code splitting.
- **Bundle Size Management**: Monitor and optimize bundle size. Be mindful of shadcn/ui component imports.
- **Image Optimization**: Use Next.js Image component with proper sizing.
- **Virtualization**: Implement virtualized lists (e.g., using `react-window` or `tanstack-virtual`) for long token lists if needed, integrating with shadcn/ui components.

### 5. Naming Conventions

- **Component Names**: PascalCase for custom components (e.g., `TokenSelector.tsx`). shadcn/ui components retain their names (`Button`, `Input`, etc.).
- **File Structure**: Match file names to component names for custom components.
- **Hook Prefixing**: Prefix custom hooks with "use" (e.g., `useTokenPrice`).
- **Event Handlers**: Prefix with "handle" (e.g., `handleSwapSubmit`).
- **Boolean Props/Variables**: Use "is", "has", or "should" prefixes (e.g., `isLoading`, `hasBalance`).
- **Constants**: Use UPPER_SNAKE_CASE for constants.

### 6. Coding Patterns

- **Early Returns**: Use early returns to reduce nesting and improve readability.
- **Destructuring**: Use object and array destructuring for cleaner code.
- **Functional Approach**: Prefer functional programming patterns.
- **Arrow Functions**: Use const arrow functions instead of function declarations.
- **Async/Await**: Use async/await instead of promise chains when possible.
- **Utility Functions**: Use helper functions (e.g., `cn` from `src/lib/utils` provided by shadcn/ui) for merging Tailwind classes conditionally.

### 7. Web3 Implementation

- **Network Configuration**: Configure EVM and Solana networks in `src/features/web3/config/appKitConfig.ts`.
- **Wallet Connection**: Implement seamless wallet connection using Reown AppKit modal (`useAppKit`) and hooks (`useAppKitAccount`). Use shadcn/ui components (e.g., `Button`, `Dialog`, `DropdownMenu`) for related UI elements.
- **Token Management**:
  - Display token balances with proper formatting (e.g., using `useBalance` from wagmi for EVM).
  - Implement token selection interface (`src/features/tokens/components/TokenSelect.tsx`), potentially using shadcn/ui `Command` or `Select` components.
  - Show token price and value calculations (requires fetching price data).
- **Swap Execution**:
  - Implement price impact warnings using shadcn/ui `Alert` or custom text elements.
  - Show gas estimations (using wagmi/viem for EVM).
  - Display transaction status and confirmations (potentially using wagmi hooks or Reown features), using shadcn/ui `Toast` or `Alert`.
  - Handle transaction errors gracefully.
- **Contract Interaction**: Use wagmi/viem hooks for EVM contract interactions. Implement proper error handling and retry mechanisms.
- **Multi-chain**: Leverage `useAppKitAccount({ namespace: '...' })` or similar patterns when handling chain-specific logic.

### 8. Error Handling

- **Input Validation**: Validate form inputs before submission, using libraries like `zod` and integrating with shadcn/ui `Form` components if applicable.
- **Web3 Errors**: Create user-friendly error messages for web3 interactions, displayed via `Toast` or `Alert`.
- **Fallbacks**: Implement fallback UI for failed components.
- **Loading States**: Show appropriate loading indicators during async operations (e.g., shadcn/ui `Skeleton`, spinners within `Button`s).

### 9. Accessibility (a11y)

- **Semantic HTML**: Use appropriate HTML elements. Leverage Radix UI primitives within shadcn/ui which often handle accessibility well.
- **Keyboard Navigation**: Ensure all interactive elements are keyboard accessible. Test shadcn/ui components.
- **ARIA Attributes**: Implement proper aria-labels, aria-live regions, and roles where shadcn/ui doesn't automatically provide them.
- **Focus Management**: Maintain proper focus order and trapping in modals/dialogs (often handled by shadcn/ui `Dialog`).
- **Color Contrast**: Ensure sufficient color contrast ratios, configured via Tailwind theme and CSS variables.
- **Screen Reader Support**: Test with screen readers for proper announcements.

### 10. Testing Strategy

- **Component Testing**: Test components in isolation using React Testing Library. Test behavior and rendering based on props.
- **Hook Testing**: Write custom hook tests for business logic.
- **Integration Testing**: Test connected components working together.
- **Web3 Mocking**: Mock web3 provider and contracts for deterministic tests.
- **A11y Testing**: Include accessibility tests using jest-axe.
- **Performance Testing**: Measure and test component rendering performance.

### 11. Documentation

- **Component Documentation**: Document custom component props, behavior, and examples. Refer to shadcn/ui documentation for its components.
- **Hook Documentation**: Document custom hook parameters, returns, and usage.
- **Inline Comments**: Add contextual comments for complex logic.
- **TypeScript Types**: Use detailed and descriptive TypeScript types as documentation.

### 12. Project-Specific Guidelines

- **Swap Interface**: Replicate Uniswap V2 token swap interface with improvements using shadcn/ui components (`Card`, `Input`, `Button`, etc.).
- **Token Lists**: Implement custom token lists with search and filtering, possibly using shadcn/ui `Command` or `DataTable`.
- **Price Charts**: Add interactive price charts for selected tokens (integrate a charting library like Recharts or Chart.js).
- **Transaction History**: Display user's transaction history, potentially using shadcn/ui `Table` or `DataTable`.
- **Settings Panel**: Create configurable settings for slippage tolerance and transaction deadline, using shadcn/ui `Dialog`, `Input`, `Slider`, etc. 